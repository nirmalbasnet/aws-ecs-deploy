name: Build and deploy to ECS

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "src/**"

permissions:
  contents: write
  id-token: write

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_ACCESS_SECRET: ${{ secrets.AWS_ACCESS_SECRET }}
  AWS_ROLE: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActions-Deploy-Role

jobs:
  semantic-release:
    name: Execute semantic release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Cache npm and node modules
        id: npm-cache
        uses: actions/cache@v4
        env:
          cache-dir: $(npm config get cache)
        with:
          path: |
            node_modules
            ${{ env.cache-dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node

      - name: Npm install
        if: ${{ steps.npm-cache.outputs.cache-hit }} != 'true'
        run: npm install --frozen-lockfile

      - name: Sematic release
        id: release-version
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          HEAD_REF: ${{ github.ref_name }}
        run: |
          OUTPUT="$(npx semantic-release --branches $HEAD_REF)"
          echo "NEXT_VERSION=$(echo "$OUTPUT" | grep -oPi 'The next release version is \K[0-9]+\.[0-9]+\.[0-9]+')" >> $GITHUB_OUTPUT

      - name: Echo the release version
        run: |
          if [ ${{ steps.release-version.outputs.NEXT_VERSION }} != '' ]; then
            echo "The version ${{ steps.release-version.outputs.NEXT_VERSION }} is getting deployed now"
          else
            echo "Skipping release since the changes made do not need to get released"
          fi

    outputs:
      expected-release-version: ${{ steps.release-version.outputs.NEXT_VERSION }}

  push-image-to-ecr:
    name: Push image to Elastic Container Reistry
    runs-on: ubuntu-latest
    needs: semantic-release
    if: ${{ needs.semantic-release.outputs.expected-release-version != '' && needs.semantic-release.outputs.expected-release-version != null }}
    env:
      version-to-release: ${{ needs.semantic-release.outputs.expected-release-version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}

      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push to ECR
        id: push-image
        env:
          DOCKER_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY_NAME: aws-ecs-deploy-demo
          IMAGE_TAG: ${{ env.version-to-release }}
        run: |
          echo $DOCKER_REGISTRY
          docker build -t $REPOSITORY_NAME:$IMAGE_TAG .
          docker tag $REPOSITORY_NAME:$IMAGE_TAG $DOCKER_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG
          docker push $DOCKER_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG
          echo "IMAGE=$DOCKER_REGISTRY/$REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: TEST IMAGE
        run: echo ${{ steps.push-image.outputs.IMAGE }}

    outputs:
      VERSIONED_IMAGE: ${{ steps.push-image.outputs.IMAGE }}

  ecs-deploy:
    name: Deploy image to ECS
    runs-on: ubuntu-latest
    needs: push-image-to-ecr
    env:
      IMAGE: ${{ needs.push-image-to-ecr.outputs.VERSIONED_IMAGE }}
    steps:
      - name: Print image being deployed
        run: |
          echo "--------------------------- ${{ toJson(needs.push-image-to-ecr.outputs) }} ---------------------"
          echo "--------------------------- ${{ env.IMAGE }} ---------------------"

      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          container-name: aws-ecs-deploy-container
          image: ${{ env.IMAGE }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: aws-ecs-demo-service
          cluster: aws-ecs-demo-cluster
          wait-for-service-stability: true
